{
  "uid" : "c36ec2911f7cba43",
  "name" : "test_back_per_pages_parametrize[1-https://toghrulmirzayev.github.io/ui-simulator/drag-and-drop.html]",
  "fullName" : "tests.test_common#test_back_per_pages_parametrize",
  "historyId" : "c8fe1442e5851d63f9f3785b6a9f994f",
  "time" : {
    "start" : 1703962785029,
    "stop" : 1703962785029,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5627ed953f83 <unknown>\n#1 0x5627ed60ccf7 <unknown>\n#2 0x5627ed64460e <unknown>\n#3 0x5627ed64126e <unknown>\n#4 0x5627ed69180c <unknown>\n#5 0x5627ed685e53 <unknown>\n#6 0x5627ed64ddd4 <unknown>\n#7 0x5627ed64f1de <unknown>\n#8 0x5627ed918531 <unknown>\n#9 0x5627ed91c455 <unknown>\n#10 0x5627ed904f55 <unknown>\n#11 0x5627ed91d0ef <unknown>\n#12 0x5627ed8e899f <unknown>\n#13 0x5627ed941008 <unknown>\n#14 0x5627ed9411d7 <unknown>\n#15 0x5627ed953124 <unknown>\n#16 0x7efe80a94ac3 <unknown>",
  "statusTrace" : "get_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7fe0203ca140>\n\n    @pytest.fixture(scope='function')\n    def get_webdriver(get_chrome_options):\n>       driver = webdriver.Chrome(options=get_chrome_options, service=Service(ChromeDriverManager().install()))\n\nconftest.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:209: in __init__\n    self.start_session(capabilities)\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:293: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe0203ca650>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#14 0x5627ed9411d7 \\\\u003Cunknown>\\\\n#15 0x5627ed953124 \\\\u003Cunknown>\\\\n#16 0x7efe80a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5627ed953f83 <unknown>\nE       #1 0x5627ed60ccf7 <unknown>\nE       #2 0x5627ed64460e <unknown>\nE       #3 0x5627ed64126e <unknown>\nE       #4 0x5627ed69180c <unknown>\nE       #5 0x5627ed685e53 <unknown>\nE       #6 0x5627ed64ddd4 <unknown>\nE       #7 0x5627ed64f1de <unknown>\nE       #8 0x5627ed918531 <unknown>\nE       #9 0x5627ed91c455 <unknown>\nE       #10 0x5627ed904f55 <unknown>\nE       #11 0x5627ed91d0ef <unknown>\nE       #12 0x5627ed8e899f <unknown>\nE       #13 0x5627ed941008 <unknown>\nE       #14 0x5627ed9411d7 <unknown>\nE       #15 0x5627ed953124 <unknown>\nE       #16 0x7efe80a94ac3 <unknown>\n\n../../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_webdriver",
    "time" : {
      "start" : 1703962785030,
      "stop" : 1703962785804,
      "duration" : 774
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5627ed953f83 <unknown>\n#1 0x5627ed60ccf7 <unknown>\n#2 0x5627ed64460e <unknown>\n#3 0x5627ed64126e <unknown>\n#4 0x5627ed69180c <unknown>\n#5 0x5627ed685e53 <unknown>\n#6 0x5627ed64ddd4 <unknown>\n#7 0x5627ed64f1de <unknown>\n#8 0x5627ed918531 <unknown>\n#9 0x5627ed91c455 <unknown>\n#10 0x5627ed904f55 <unknown>\n#11 0x5627ed91d0ef <unknown>\n#12 0x5627ed8e899f <unknown>\n#13 0x5627ed941008 <unknown>\n#14 0x5627ed9411d7 <unknown>\n#15 0x5627ed953124 <unknown>\n#16 0x7efe80a94ac3 <unknown>\n\n",
    "statusTrace" : "  File \"/home/runner/.local/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 902, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-automation/test-automation/conftest.py\", line 28, in get_webdriver\n    driver = webdriver.Chrome(options=get_chrome_options, service=Service(ChromeDriverManager().install()))\n  File \"/home/runner/.local/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/home/runner/.local/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py\", line 61, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/home/runner/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 209, in __init__\n    self.start_session(capabilities)\n  File \"/home/runner/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 293, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n  File \"/home/runner/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "get_chrome_options",
    "time" : {
      "start" : 1703962785030,
      "stop" : 1703962785030,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "common"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_common"
  }, {
    "name" : "host",
    "value" : "fv-az1215-329"
  }, {
    "name" : "thread",
    "value" : "4179-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_common"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "index",
    "value" : "1"
  }, {
    "name" : "url",
    "value" : "'https://toghrulmirzayev.github.io/ui-simulator/drag-and-drop.html'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "common" ]
  },
  "source" : "c36ec2911f7cba43.json",
  "parameterValues" : [ "1", "'https://toghrulmirzayev.github.io/ui-simulator/drag-and-drop.html'" ]
}